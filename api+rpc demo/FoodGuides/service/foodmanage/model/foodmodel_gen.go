// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	foodFieldNames          = builder.RawFieldNames(&Food{})
	foodRows                = strings.Join(foodFieldNames, ",")
	foodRowsExpectAutoSet   = strings.Join(stringx.Remove(foodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	foodRowsWithPlaceHolder = strings.Join(stringx.Remove(foodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	foodModel interface {
		Insert(ctx context.Context, data *Food) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Food, error)
		FindOneByName(ctx context.Context, name string) (*Food, error)
		Update(ctx context.Context, data *Food) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFoodModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Food struct {
		Id           int64     `db:"id"`           // 食物Id
		Name         string    `db:"name"`         // 食物名称
		Protein      string    `db:"protein"`      // 食物蛋白质含量
		Fat          string    `db:"fat"`          // 食物脂肪含量
		Carbohydrate string    `db:"carbohydrate"` // 食物碳水化合物含量
		Calorie      string    `db:"calorie"`      // 食物卡路里
		Minerals     string    `db:"minerals"`     // 食物矿物质含量
		Calcium      string    `db:"calcium"`      // 食物钙含量
		Phosphorus   string    `db:"phosphorus"`   // 食物磷含量
		Iron         string    `db:"iron"`         // 食物铁含量
		Purine       string    `db:"purine"`       // 食物嘌呤含量
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newFoodModel(conn sqlx.SqlConn) *defaultFoodModel {
	return &defaultFoodModel{
		conn:  conn,
		table: "`food`",
	}
}

func (m *defaultFoodModel) withSession(session sqlx.Session) *defaultFoodModel {
	return &defaultFoodModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`food`",
	}
}

func (m *defaultFoodModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFoodModel) FindOne(ctx context.Context, id int64) (*Food, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", foodRows, m.table)
	var resp Food
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFoodModel) FindOneByName(ctx context.Context, name string) (*Food, error) {
	var resp Food
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", foodRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFoodModel) Insert(ctx context.Context, data *Food) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, foodRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Protein, data.Fat, data.Carbohydrate, data.Calorie, data.Minerals, data.Calcium, data.Phosphorus, data.Iron, data.Purine)
	return ret, err
}

func (m *defaultFoodModel) Update(ctx context.Context, newData *Food) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, foodRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Protein, newData.Fat, newData.Carbohydrate, newData.Calorie, newData.Minerals, newData.Calcium, newData.Phosphorus, newData.Iron, newData.Purine, newData.Id)
	return err
}

func (m *defaultFoodModel) tableName() string {
	return m.table
}
