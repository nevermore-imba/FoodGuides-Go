// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFoodFieldNames          = builder.RawFieldNames(&UserFood{})
	userFoodRows                = strings.Join(userFoodFieldNames, ",")
	userFoodRowsExpectAutoSet   = strings.Join(stringx.Remove(userFoodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userFoodRowsWithPlaceHolder = strings.Join(stringx.Remove(userFoodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userFoodModel interface {
		Insert(ctx context.Context, data *UserFood) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserFood, error)
		FindOneByUserid(ctx context.Context, userid sql.NullInt64) (*UserFood, error)
		Update(ctx context.Context, data *UserFood) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserFoodModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserFood struct {
		Id         int64         `db:"id"`     // id
		Userid     sql.NullInt64 `db:"userid"` // 用户Id
		Foodid     sql.NullInt64 `db:"foodid"` // 食物Id
		CreateTime time.Time     `db:"create_time"`
		UpdateTime time.Time     `db:"update_time"`
	}
)

func newUserFoodModel(conn sqlx.SqlConn) *defaultUserFoodModel {
	return &defaultUserFoodModel{
		conn:  conn,
		table: "`user_food`",
	}
}

func (m *defaultUserFoodModel) withSession(session sqlx.Session) *defaultUserFoodModel {
	return &defaultUserFoodModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`user_food`",
	}
}

func (m *defaultUserFoodModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserFoodModel) FindOne(ctx context.Context, id int64) (*UserFood, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFoodRows, m.table)
	var resp UserFood
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFoodModel) FindOneByUserid(ctx context.Context, userid sql.NullInt64) (*UserFood, error) {
	var resp UserFood
	query := fmt.Sprintf("select %s from %s where `userid` = ? limit 1", userFoodRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFoodModel) Insert(ctx context.Context, data *UserFood) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userFoodRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Userid, data.Foodid)
	return ret, err
}

func (m *defaultUserFoodModel) Update(ctx context.Context, newData *UserFood) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFoodRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Userid, newData.Foodid, newData.Id)
	return err
}

func (m *defaultUserFoodModel) tableName() string {
	return m.table
}
